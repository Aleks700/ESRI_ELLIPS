{"version":3,"sources":["component/mapWiev/MapView.js","component/header/header.js","App.js","index.js"],"names":["WebMapView","props","mapRef","React","createRef","loadModules","css","then","Map","MapView","Graphic","geometryEngine","map","basemap","view","container","current","center","X","Y","zoom","point1","type","longitude","latitude","point2","point3","point4","simpleMarkerSymbol","color","width","outline","pointGraphic1","geometry","symbol","pointGraphic2","lineGrafs","paths","lineGrafs2","graphics","add","LongitudeToMeter","geodesicLength","LatitudeToMeter","console","log","polygonGraphic","rings","x","y","a","b","angle","steps","points","beta","Math","PI","sinbeta","sin","cosbeta","cos","i","alpha","sinalpha","cosalpha","array","push","calculateEllipse","this","className","ref","Component","header","defaultProps","semimajorAxis","semiminorAxis","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84d270be.chunk.js","sourcesContent":["import React from 'react';\r\nimport { loadModules } from 'esri-loader';\r\nimport './map.css'\r\n\r\nexport default class WebMapView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapRef = React.createRef();\r\n  }\r\n  static defaultProps={\r\n    X:30.20416,\r\n    Y:59.93237,\r\n    zoom:10,\r\n    semimajorAxis:1000,\r\n    semiminorAxis:500,\r\n    angle:30\r\n  };\r\n  componentDidMount() {\r\n   \r\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\r\n    loadModules(['esri/Map','esri/views/MapView','esri/Graphic',\"esri/geometry/geometryEngine\"], { css: true })\r\n    .then(([Map, MapView,Graphic,geometryEngine]) => {\r\n      const map = new Map({\r\n        basemap: 'topo-vector'\r\n      });\r\n\r\n      this.view = new MapView({\r\n        container: this.mapRef.current,\r\n        map: map,\r\n        center: [this.props.X, this.props.Y],\r\n        zoom: this.props.zoom\r\n      });\r\n\r\n      const point1 = {\r\n        type: \"point\",\r\n        longitude: 30.20416,\r\n        latitude: 59.93237\r\n      };\r\n\r\n      const point2 = {\r\n        type: \"point\",\r\n        longitude: 31.20416,\r\n        latitude: 59.93237\r\n      };\r\n      const point3 = {\r\n        type: \"point\",\r\n        longitude: 30.20416,\r\n        latitude: 59.93237\r\n      };\r\n\r\n      const point4 = {\r\n        type: \"point\",\r\n        longitude: 30.20416,\r\n        latitude: 58.83237\r\n      };\r\n      const simpleMarkerSymbol = {\r\n        type: \"simple-marker\",\r\n        color: [226, 119, 40],  // orange\r\n        width: 2,\r\n        outline: {\r\n          color: [255, 255, 255], // white\r\n          width: 3,\r\n        }\r\n      };\r\n      const pointGraphic1 = new Graphic({\r\n        geometry: point1,\r\n        symbol: simpleMarkerSymbol\r\n      });\r\n      const pointGraphic2 = new Graphic({\r\n        geometry: point2,\r\n        symbol: simpleMarkerSymbol\r\n      });\r\n      const lineGrafs=new Graphic({\r\n        geometry: {\r\n          type: \"polyline\",\r\n          paths: [\r\n            [point1.longitude, point1.latitude],\r\n            [point2.longitude, point2.latitude]\r\n          ]\r\n        },\r\n        symbol: {\r\n          type: \"simple-line\",\r\n          color: \"yellow\",\r\n          width: 1\r\n        }\r\n      });\r\n      const lineGrafs2=new Graphic({\r\n        geometry: {\r\n          type: \"polyline\",\r\n          paths: [\r\n            [point3.longitude, point3.latitude],\r\n            [point4.longitude, point4.latitude]\r\n          ]\r\n        },\r\n        symbol: {\r\n          type: \"simple-line\",\r\n          color: \"red\",\r\n          width: 1\r\n        }\r\n      });\r\n\r\n\r\n      this.view.graphics.add(pointGraphic1);\r\n      this.view.graphics.add(pointGraphic2);\r\n      this.view.graphics.add(lineGrafs);\r\n      this.view.graphics.add(lineGrafs2);\r\n      const LongitudeToMeter=geometryEngine.geodesicLength(lineGrafs.geometry,\"meters\");\r\n      const LatitudeToMeter=geometryEngine.geodesicLength(lineGrafs.geometry,\"meters\");\r\n      console.log(1/LongitudeToMeter+\" long\");\r\n      console.log(1/LatitudeToMeter+\" latit\");\r\n      function calculateEllipse(x,y,a,b,angle,steps){\r\n        if(steps==null)steps=36;\r\n        let points=[];\r\n        let beta=-angle*(Math.PI/180);\r\n        let sinbeta=Math.sin(beta);\r\n        let cosbeta=Math.cos(beta);\r\n        for(let i=0;i<360;i+=360/steps){\r\n          let alpha=i*(Math.PI/180);\r\n          let sinalpha=Math.sin(alpha);\r\n          let cosalpha=Math.cos(alpha);\r\n          let X = x + (a * cosalpha * cosbeta - b * sinalpha * sinbeta);\r\n          let Y = y + (a * cosalpha * sinbeta + b * sinalpha * cosbeta);\r\n          let array=[X,Y];\r\n          points.push(array);\r\n        }\r\n        console.log(points);\r\n        return (points);\r\n      }\r\n      const ellipse_paths=calculateEllipse(30.20416,59.93237,0.017884826245207995,0.00884826245207995,40,200);\r\n\r\n\r\n      //Draw ellipse with Grafics\r\n      var polygon = {\r\n        type: \"polygon\",\r\n        rings: ellipse_paths\r\n      };\r\n\r\n      var simpleFillSymbol = {\r\n        type: \"simple-fill\",\r\n        color: [227, 139, 79, 0.8],  // orange, opacity 80%\r\n        outline: {\r\n          color: [255, 255, 255],\r\n          width: 1\r\n        }\r\n      };\r\n\r\n      var polygonGraphic = new Graphic({\r\n        geometry: polygon,\r\n        symbol: simpleFillSymbol\r\n      });\r\n\r\n      this.view.graphics.add(polygonGraphic);\r\n      \r\n\r\n      // console.log(geometryEngine.distance(point1 ,point2,\"meters\"));\r\n\r\n      \r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.view) {\r\n      // destroy the map view\r\n      this.view.container = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"webmap\" ref={this.mapRef} />\r\n    );\r\n  }\r\n}","import React,{Fragment} from 'react'\r\n\r\nexport default function header() {\r\n    return (\r\n        <Fragment>\r\n            <h1>добро пожаловать в приложение</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React,{Fragment} from 'react';\nimport  WebMapView from './component/mapWiev/MapView';\nimport Header from './component/header/header';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header></Header>\n      <WebMapView></WebMapView>\n     \n    </Fragment>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}